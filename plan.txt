PART 1- DESIGN:

(python, numpy, mypy, pytest)

1. Present value approach
    //1a: get the risk free rate - yield
    //- construct yield curve (5 requests per 5 min - store in pickle file for now, later store in db and call once per day)
    //- get rfr for input bond's maturity from yield curve
    - calculate risk premia 
        - get yields for bonds of similar credit rating at diff maturities
        - construct yield curve for that credit rating
        - estimate yield to use as discount rate
            - FRED apis (series_id = right of title)
        -DATA LIMITED
            //- use FRED APIs to get yield proxy per credit rating


//maybe come back to this
2. Stochastic calculus approach to interest rate forecast
    (model assumptions??)
    use vasicek model to forecast short term interest rates for each cash flow
    run multiple simulations and store bond price for each interest rate path
    then average the prices



Inputs:
- maturity date
- interest rate
- face value
- payment frequency
- credit rating 

Outputs:
- can return result from each approach
- clean and dirty bond prices



PART 2: IMPLEMENTATION

Application:
- bond class
- class for each valuation method
- tests (pytest)
    - test PV calc: do calculations in excel to create test cases


FastAPI:
- post endpoint, returns dirty & clean price (& any calculated inputs / assumptions)
- posts request, response, dirty & clean prices in database
- rate limiting

DB:
- local postgres
- SQLalchemy
- responses table (raw response & fields mapped out)
- db testing - pytest fixtures




PART 3: DEPLOYMENT
deta space for free? fastapi docs
- will need to host separately - Heroku or AWS free tier




To do:
//- create MonteCarlo simulation class
//- incorporate yield simulations into Valuation PV class 
//- test the new calc - check behaviour eg compare price with credit ratings, maturities, coupon frequency
//- try to break through swagger & handle the errors
//- add rate limiting
//- test db for crud utils
- postgres db local - put API keys & db info in env variables (then add these to deta space environment)
- deployment - db then app
- readme, remove plan & make repo public